#+AUTHOR: Bruno Cardoso <cardoso.bc@gmail.com>
#+DATE: 2024-01-28
#+STARTUP: indent content

* =gc-maybe= (or the Garbage Collector /Maybe/ Trick)

I have used [[https://gitlab.com/koral/gcmh][GCMH]] (the /Garbage Collector Magic Hack/) for many years. It's great.

/GCMH/ hooks itself in pre/post-command hooks. It (re)sets its idle timer on every command, which seems to be a good strategy, but also feels [[https://gitlab.com/koral/gcmh/-/issues/7][a bit too much]].

Conversely, all that =gc-maybe-mode= does is this:

- With an idle timer (default is 8 seconds), call =garbage-collect-maybe= (from Emacs 28.1 or above) with a factor based on the current =gc-cons-percentage=, so it garbage collects only if needed;

- Add hooks to =minibuffer-setup-hook=, to raise the GC cons threshold, and to =minibuffer-exit-hook=, to restore the GC cons threshold.

That's it. It is similar to the GCMH /hack/, but as a cheap /trick/.

Also, with a ":before" advice, we can raise the GC cons threshold (=gc-maybe-raise-threshold= or =gc-maybe-raise-threshold-briefly=) for known costly functions.

When raising the threshold /briefly/, a "restore" timer is set, so it resets to default values (=gc-maybe-restore-threshold=) after an idle delay.

See =M-x customize-group RET gc-maybe= for all user options.


* Setup

#+begin_src emacs-lisp
(use-package gc-maybe
  :vc (:url "https://github.com/bcardoso/gc-maybe/")
  :demand t
  :config
  ;; Default values
  (setopt gc-maybe-cons-threshold (* 16 1024 1024))
  (setopt gc-maybe-cons-percentage 0.2)
  (setopt gc-maybe-idle-delay 8)
  (setopt gc-maybe-idle-restore 5)

  ;; Enable mode to set the idle timer and minibuffer hooks
  (gc-maybe-mode +1)

  ;; Optionally log GC data in a buffer
  ;; (setopt gc-maybe-log-stats-in-buffer t)

  ;; Advice example
  ;; (advice-add 'org-ql-select :before #'gc-maybe-raise-threshold-briefly)
  )
#+end_src


* Related

- [[https://gitlab.com/koral/gcmh][GCMH]]: the Garbage Collector Magic Hack

  - [2019-03-11] [[https://akrl.sdf.org/#orgc15a10d][The original magic Emacs garbage collection hack]]

- [[https://emacsconf.org/2023/talks/gc/][EmacsConf - 2023 - talks - emacs-gc-stats: Does garbage collection actually slow down Emacs?]]

  - [[https://old.reddit.com/r/emacs/comments/18eadk5/results_please_help_collecting_statistics_to/][(Results) Please help collecting statistics to optimize Emacs GC defaults : emacs]]

- [2021-03-07] [[https://mail.gnu.org/archive/html/emacs-devel/2021-03/msg00393.html][Opportunistic GC]] on [[https://lists.gnu.org/archive/html/emacs-devel/][emacs-devel]] mailing list
